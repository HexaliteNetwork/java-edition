// Code generated by Prisma Client Rust. DO NOT EDIT

#![allow(warnings, unused)]
use prisma_client_rust::{
    bigdecimal::{self, FromPrimitive},
    chrono,
    datamodel::parse_configuration,
    operator::Operator,
    prisma_models::{InternalDataModelBuilder, PrismaValue},
    queries::{QueryContext, QueryInfo, Result as QueryResult},
    query_core::{
        executor, schema_builder, BuildMode, CoreError, InterpreterError, QueryExecutor,
        QueryGraphBuilderError, QuerySchema, QueryValue, Selection,
    },
    serde_json, transform_equals, BatchResult, Direction, ManyArgs, SerializedWhere,
    SerializedWhereValue, UniqueArgs,
};
pub use prisma_client_rust::{queries::Error as QueryError, NewClientError};
use serde::{Deserialize, Serialize};
use std::path::Path;
use std::sync::Arc;
static DATAMODEL_STR : & 'static str = "model FFAPlayerStats {\n    playerId          String @id @unique @db.Uuid\n    kills             Int    @default(0)\n    deaths            Int    @default(0)\n    assists           Int    @default(0)\n    killstreak        Int    @default(0)\n    longestKillstreak Int    @default(0)\n}\n\ndatasource db {\n    provider = \"postgres\"\n    url      = env(\"DATABASE_URL\")\n}\n\ngenerator client {\n    provider = \"cargo prisma\"\n    output   = \"../src/prisma.rs\"\n}\n\n\nmodel Player {\n    id           String    @id @unique @db.Uuid\n    hexes        Int       @default(0)\n    lastUsername String\n    lastSeen     DateTime\n    createdAt    DateTime  @default(now())\n    updatedAt    DateTime  @default(now())\n\n    @@index(lastUsername)\n}\n\n" ;
static DATABASE_STR: &'static str = "postgres";
pub async fn new_client() -> Result<_prisma::PrismaClient, NewClientError> {
    let config = parse_configuration(DATAMODEL_STR)?.subject;
    let source = config
        .datasources
        .first()
        .expect("Pleasy supply a datasource in your schema.prisma file");
    let url = if let Some(url) = source.load_shadow_database_url()? {
        url
    } else {
        source.load_url(|key| std::env::var(key).ok())?
    };
    let url = if url.starts_with("file:") {
        let path = url.split(":").nth(1).unwrap();
        if Path::new("./schema.prisma").exists() {
            url
        } else if Path::new("./prisma/schema.prisma").exists() {
            format!("file:./prisma/{}", path)
        } else {
            url
        }
    } else {
        url
    };
    new_client_with_url(&url).await
}
pub async fn new_client_with_url(url: &str) -> Result<_prisma::PrismaClient, NewClientError> {
    let config = parse_configuration(DATAMODEL_STR)?.subject;
    let source = config
        .datasources
        .first()
        .expect("Pleasy supply a datasource in your schema.prisma file");
    let (db_name, executor) = executor::load(&source, &[], &url).await?;
    let internal_model = InternalDataModelBuilder::new(DATAMODEL_STR).build(db_name);
    let query_schema = Arc::new(schema_builder::build(
        internal_model,
        BuildMode::Modern,
        true,
        source.capabilities(),
        vec![],
        source.referential_integrity(),
    ));
    executor.primary_connector().get_connection().await?;
    Ok(PrismaClient::_new(executor, query_schema))
}
pub mod ffa_player_stats {
    use super::_prisma::*;
    use super::*;
    pub mod player_id {
        use super::super::*;
        use super::_prisma::*;
        use super::{Cursor, OrderByParam, SetParam, UniqueWhereParam, WhereParam, WithParam};
        pub fn set<T: From<Set>>(value: String) -> T {
            Set(value).into()
        }
        pub fn equals<T: From<UniqueWhereParam>>(value: String) -> T {
            UniqueWhereParam::PlayerIdEquals(value).into()
        }
        pub fn order(direction: Direction) -> OrderByParam {
            OrderByParam::PlayerId(direction)
        }
        pub fn cursor(cursor: String) -> Cursor {
            Cursor::PlayerId(cursor)
        }
        pub fn in_vec(value: Vec<String>) -> WhereParam {
            WhereParam::PlayerIdInVec(value)
        }
        pub fn not_in_vec(value: Vec<String>) -> WhereParam {
            WhereParam::PlayerIdNotInVec(value)
        }
        pub fn lt(value: String) -> WhereParam {
            WhereParam::PlayerIdLt(value)
        }
        pub fn lte(value: String) -> WhereParam {
            WhereParam::PlayerIdLte(value)
        }
        pub fn gt(value: String) -> WhereParam {
            WhereParam::PlayerIdGt(value)
        }
        pub fn gte(value: String) -> WhereParam {
            WhereParam::PlayerIdGte(value)
        }
        pub fn contains(value: String) -> WhereParam {
            WhereParam::PlayerIdContains(value)
        }
        pub fn starts_with(value: String) -> WhereParam {
            WhereParam::PlayerIdStartsWith(value)
        }
        pub fn ends_with(value: String) -> WhereParam {
            WhereParam::PlayerIdEndsWith(value)
        }
        pub fn mode(value: QueryMode) -> WhereParam {
            WhereParam::PlayerIdMode(value)
        }
        pub fn not(value: String) -> WhereParam {
            WhereParam::PlayerIdNot(value)
        }
        pub struct Set(String);
        impl From<Set> for SetParam {
            fn from(value: Set) -> Self {
                Self::SetPlayerId(value.0)
            }
        }
    }
    pub mod kills {
        use super::super::*;
        use super::_prisma::*;
        use super::{Cursor, OrderByParam, SetParam, UniqueWhereParam, WhereParam, WithParam};
        pub fn set<T: From<Set>>(value: i32) -> T {
            Set(value).into()
        }
        pub fn equals(value: i32) -> WhereParam {
            WhereParam::KillsEquals(value).into()
        }
        pub fn order(direction: Direction) -> OrderByParam {
            OrderByParam::Kills(direction)
        }
        pub fn in_vec(value: Vec<i32>) -> WhereParam {
            WhereParam::KillsInVec(value)
        }
        pub fn not_in_vec(value: Vec<i32>) -> WhereParam {
            WhereParam::KillsNotInVec(value)
        }
        pub fn lt(value: i32) -> WhereParam {
            WhereParam::KillsLt(value)
        }
        pub fn lte(value: i32) -> WhereParam {
            WhereParam::KillsLte(value)
        }
        pub fn gt(value: i32) -> WhereParam {
            WhereParam::KillsGt(value)
        }
        pub fn gte(value: i32) -> WhereParam {
            WhereParam::KillsGte(value)
        }
        pub fn not(value: i32) -> WhereParam {
            WhereParam::KillsNot(value)
        }
        pub fn increment(value: i32) -> SetParam {
            SetParam::IncrementKills(value)
        }
        pub fn decrement(value: i32) -> SetParam {
            SetParam::DecrementKills(value)
        }
        pub fn multiply(value: i32) -> SetParam {
            SetParam::MultiplyKills(value)
        }
        pub fn divide(value: i32) -> SetParam {
            SetParam::DivideKills(value)
        }
        pub struct Set(i32);
        impl From<Set> for SetParam {
            fn from(value: Set) -> Self {
                Self::SetKills(value.0)
            }
        }
    }
    pub mod deaths {
        use super::super::*;
        use super::_prisma::*;
        use super::{Cursor, OrderByParam, SetParam, UniqueWhereParam, WhereParam, WithParam};
        pub fn set<T: From<Set>>(value: i32) -> T {
            Set(value).into()
        }
        pub fn equals(value: i32) -> WhereParam {
            WhereParam::DeathsEquals(value).into()
        }
        pub fn order(direction: Direction) -> OrderByParam {
            OrderByParam::Deaths(direction)
        }
        pub fn in_vec(value: Vec<i32>) -> WhereParam {
            WhereParam::DeathsInVec(value)
        }
        pub fn not_in_vec(value: Vec<i32>) -> WhereParam {
            WhereParam::DeathsNotInVec(value)
        }
        pub fn lt(value: i32) -> WhereParam {
            WhereParam::DeathsLt(value)
        }
        pub fn lte(value: i32) -> WhereParam {
            WhereParam::DeathsLte(value)
        }
        pub fn gt(value: i32) -> WhereParam {
            WhereParam::DeathsGt(value)
        }
        pub fn gte(value: i32) -> WhereParam {
            WhereParam::DeathsGte(value)
        }
        pub fn not(value: i32) -> WhereParam {
            WhereParam::DeathsNot(value)
        }
        pub fn increment(value: i32) -> SetParam {
            SetParam::IncrementDeaths(value)
        }
        pub fn decrement(value: i32) -> SetParam {
            SetParam::DecrementDeaths(value)
        }
        pub fn multiply(value: i32) -> SetParam {
            SetParam::MultiplyDeaths(value)
        }
        pub fn divide(value: i32) -> SetParam {
            SetParam::DivideDeaths(value)
        }
        pub struct Set(i32);
        impl From<Set> for SetParam {
            fn from(value: Set) -> Self {
                Self::SetDeaths(value.0)
            }
        }
    }
    pub mod assists {
        use super::super::*;
        use super::_prisma::*;
        use super::{Cursor, OrderByParam, SetParam, UniqueWhereParam, WhereParam, WithParam};
        pub fn set<T: From<Set>>(value: i32) -> T {
            Set(value).into()
        }
        pub fn equals(value: i32) -> WhereParam {
            WhereParam::AssistsEquals(value).into()
        }
        pub fn order(direction: Direction) -> OrderByParam {
            OrderByParam::Assists(direction)
        }
        pub fn in_vec(value: Vec<i32>) -> WhereParam {
            WhereParam::AssistsInVec(value)
        }
        pub fn not_in_vec(value: Vec<i32>) -> WhereParam {
            WhereParam::AssistsNotInVec(value)
        }
        pub fn lt(value: i32) -> WhereParam {
            WhereParam::AssistsLt(value)
        }
        pub fn lte(value: i32) -> WhereParam {
            WhereParam::AssistsLte(value)
        }
        pub fn gt(value: i32) -> WhereParam {
            WhereParam::AssistsGt(value)
        }
        pub fn gte(value: i32) -> WhereParam {
            WhereParam::AssistsGte(value)
        }
        pub fn not(value: i32) -> WhereParam {
            WhereParam::AssistsNot(value)
        }
        pub fn increment(value: i32) -> SetParam {
            SetParam::IncrementAssists(value)
        }
        pub fn decrement(value: i32) -> SetParam {
            SetParam::DecrementAssists(value)
        }
        pub fn multiply(value: i32) -> SetParam {
            SetParam::MultiplyAssists(value)
        }
        pub fn divide(value: i32) -> SetParam {
            SetParam::DivideAssists(value)
        }
        pub struct Set(i32);
        impl From<Set> for SetParam {
            fn from(value: Set) -> Self {
                Self::SetAssists(value.0)
            }
        }
    }
    pub mod killstreak {
        use super::super::*;
        use super::_prisma::*;
        use super::{Cursor, OrderByParam, SetParam, UniqueWhereParam, WhereParam, WithParam};
        pub fn set<T: From<Set>>(value: i32) -> T {
            Set(value).into()
        }
        pub fn equals(value: i32) -> WhereParam {
            WhereParam::KillstreakEquals(value).into()
        }
        pub fn order(direction: Direction) -> OrderByParam {
            OrderByParam::Killstreak(direction)
        }
        pub fn in_vec(value: Vec<i32>) -> WhereParam {
            WhereParam::KillstreakInVec(value)
        }
        pub fn not_in_vec(value: Vec<i32>) -> WhereParam {
            WhereParam::KillstreakNotInVec(value)
        }
        pub fn lt(value: i32) -> WhereParam {
            WhereParam::KillstreakLt(value)
        }
        pub fn lte(value: i32) -> WhereParam {
            WhereParam::KillstreakLte(value)
        }
        pub fn gt(value: i32) -> WhereParam {
            WhereParam::KillstreakGt(value)
        }
        pub fn gte(value: i32) -> WhereParam {
            WhereParam::KillstreakGte(value)
        }
        pub fn not(value: i32) -> WhereParam {
            WhereParam::KillstreakNot(value)
        }
        pub fn increment(value: i32) -> SetParam {
            SetParam::IncrementKillstreak(value)
        }
        pub fn decrement(value: i32) -> SetParam {
            SetParam::DecrementKillstreak(value)
        }
        pub fn multiply(value: i32) -> SetParam {
            SetParam::MultiplyKillstreak(value)
        }
        pub fn divide(value: i32) -> SetParam {
            SetParam::DivideKillstreak(value)
        }
        pub struct Set(i32);
        impl From<Set> for SetParam {
            fn from(value: Set) -> Self {
                Self::SetKillstreak(value.0)
            }
        }
    }
    pub mod longest_killstreak {
        use super::super::*;
        use super::_prisma::*;
        use super::{Cursor, OrderByParam, SetParam, UniqueWhereParam, WhereParam, WithParam};
        pub fn set<T: From<Set>>(value: i32) -> T {
            Set(value).into()
        }
        pub fn equals(value: i32) -> WhereParam {
            WhereParam::LongestKillstreakEquals(value).into()
        }
        pub fn order(direction: Direction) -> OrderByParam {
            OrderByParam::LongestKillstreak(direction)
        }
        pub fn in_vec(value: Vec<i32>) -> WhereParam {
            WhereParam::LongestKillstreakInVec(value)
        }
        pub fn not_in_vec(value: Vec<i32>) -> WhereParam {
            WhereParam::LongestKillstreakNotInVec(value)
        }
        pub fn lt(value: i32) -> WhereParam {
            WhereParam::LongestKillstreakLt(value)
        }
        pub fn lte(value: i32) -> WhereParam {
            WhereParam::LongestKillstreakLte(value)
        }
        pub fn gt(value: i32) -> WhereParam {
            WhereParam::LongestKillstreakGt(value)
        }
        pub fn gte(value: i32) -> WhereParam {
            WhereParam::LongestKillstreakGte(value)
        }
        pub fn not(value: i32) -> WhereParam {
            WhereParam::LongestKillstreakNot(value)
        }
        pub fn increment(value: i32) -> SetParam {
            SetParam::IncrementLongestKillstreak(value)
        }
        pub fn decrement(value: i32) -> SetParam {
            SetParam::DecrementLongestKillstreak(value)
        }
        pub fn multiply(value: i32) -> SetParam {
            SetParam::MultiplyLongestKillstreak(value)
        }
        pub fn divide(value: i32) -> SetParam {
            SetParam::DivideLongestKillstreak(value)
        }
        pub struct Set(i32);
        impl From<Set> for SetParam {
            fn from(value: Set) -> Self {
                Self::SetLongestKillstreak(value.0)
            }
        }
    }
    pub fn _outputs() -> Vec<Selection> {
        [
            "playerId",
            "kills",
            "deaths",
            "assists",
            "killstreak",
            "longestKillstreak",
        ]
        .into_iter()
        .map(|o| {
            let builder = Selection::builder(o);
            builder.build()
        })
        .collect()
    }
    #[derive(Debug, Clone, Serialize, Deserialize)]
    pub struct Data {
        #[serde(rename = "playerId")]
        pub player_id: String,
        #[serde(rename = "kills")]
        pub kills: i32,
        #[serde(rename = "deaths")]
        pub deaths: i32,
        #[serde(rename = "assists")]
        pub assists: i32,
        #[serde(rename = "killstreak")]
        pub killstreak: i32,
        #[serde(rename = "longestKillstreak")]
        pub longest_killstreak: i32,
    }
    impl Data {}
    #[derive(Clone)]
    pub enum WithParam {}
    impl Into<Selection> for WithParam {
        fn into(self) -> Selection {
            match self {}
        }
    }
    #[derive(Clone)]
    pub enum SetParam {
        SetPlayerId(String),
        SetKills(i32),
        IncrementKills(i32),
        DecrementKills(i32),
        MultiplyKills(i32),
        DivideKills(i32),
        SetDeaths(i32),
        IncrementDeaths(i32),
        DecrementDeaths(i32),
        MultiplyDeaths(i32),
        DivideDeaths(i32),
        SetAssists(i32),
        IncrementAssists(i32),
        DecrementAssists(i32),
        MultiplyAssists(i32),
        DivideAssists(i32),
        SetKillstreak(i32),
        IncrementKillstreak(i32),
        DecrementKillstreak(i32),
        MultiplyKillstreak(i32),
        DivideKillstreak(i32),
        SetLongestKillstreak(i32),
        IncrementLongestKillstreak(i32),
        DecrementLongestKillstreak(i32),
        MultiplyLongestKillstreak(i32),
        DivideLongestKillstreak(i32),
    }
    impl Into<(String, PrismaValue)> for SetParam {
        fn into(self) -> (String, PrismaValue) {
            match self {
                SetParam::SetPlayerId(value) => {
                    ("playerId".to_string(), PrismaValue::String(value))
                }
                SetParam::SetKills(value) => ("kills".to_string(), PrismaValue::Int(value as i64)),
                SetParam::IncrementKills(value) => (
                    "kills".to_string(),
                    PrismaValue::Object(vec![(
                        "increment".to_string(),
                        PrismaValue::Int(value as i64),
                    )]),
                ),
                SetParam::DecrementKills(value) => (
                    "kills".to_string(),
                    PrismaValue::Object(vec![(
                        "decrement".to_string(),
                        PrismaValue::Int(value as i64),
                    )]),
                ),
                SetParam::MultiplyKills(value) => (
                    "kills".to_string(),
                    PrismaValue::Object(vec![(
                        "multiply".to_string(),
                        PrismaValue::Int(value as i64),
                    )]),
                ),
                SetParam::DivideKills(value) => (
                    "kills".to_string(),
                    PrismaValue::Object(vec![(
                        "divide".to_string(),
                        PrismaValue::Int(value as i64),
                    )]),
                ),
                SetParam::SetDeaths(value) => {
                    ("deaths".to_string(), PrismaValue::Int(value as i64))
                }
                SetParam::IncrementDeaths(value) => (
                    "deaths".to_string(),
                    PrismaValue::Object(vec![(
                        "increment".to_string(),
                        PrismaValue::Int(value as i64),
                    )]),
                ),
                SetParam::DecrementDeaths(value) => (
                    "deaths".to_string(),
                    PrismaValue::Object(vec![(
                        "decrement".to_string(),
                        PrismaValue::Int(value as i64),
                    )]),
                ),
                SetParam::MultiplyDeaths(value) => (
                    "deaths".to_string(),
                    PrismaValue::Object(vec![(
                        "multiply".to_string(),
                        PrismaValue::Int(value as i64),
                    )]),
                ),
                SetParam::DivideDeaths(value) => (
                    "deaths".to_string(),
                    PrismaValue::Object(vec![(
                        "divide".to_string(),
                        PrismaValue::Int(value as i64),
                    )]),
                ),
                SetParam::SetAssists(value) => {
                    ("assists".to_string(), PrismaValue::Int(value as i64))
                }
                SetParam::IncrementAssists(value) => (
                    "assists".to_string(),
                    PrismaValue::Object(vec![(
                        "increment".to_string(),
                        PrismaValue::Int(value as i64),
                    )]),
                ),
                SetParam::DecrementAssists(value) => (
                    "assists".to_string(),
                    PrismaValue::Object(vec![(
                        "decrement".to_string(),
                        PrismaValue::Int(value as i64),
                    )]),
                ),
                SetParam::MultiplyAssists(value) => (
                    "assists".to_string(),
                    PrismaValue::Object(vec![(
                        "multiply".to_string(),
                        PrismaValue::Int(value as i64),
                    )]),
                ),
                SetParam::DivideAssists(value) => (
                    "assists".to_string(),
                    PrismaValue::Object(vec![(
                        "divide".to_string(),
                        PrismaValue::Int(value as i64),
                    )]),
                ),
                SetParam::SetKillstreak(value) => {
                    ("killstreak".to_string(), PrismaValue::Int(value as i64))
                }
                SetParam::IncrementKillstreak(value) => (
                    "killstreak".to_string(),
                    PrismaValue::Object(vec![(
                        "increment".to_string(),
                        PrismaValue::Int(value as i64),
                    )]),
                ),
                SetParam::DecrementKillstreak(value) => (
                    "killstreak".to_string(),
                    PrismaValue::Object(vec![(
                        "decrement".to_string(),
                        PrismaValue::Int(value as i64),
                    )]),
                ),
                SetParam::MultiplyKillstreak(value) => (
                    "killstreak".to_string(),
                    PrismaValue::Object(vec![(
                        "multiply".to_string(),
                        PrismaValue::Int(value as i64),
                    )]),
                ),
                SetParam::DivideKillstreak(value) => (
                    "killstreak".to_string(),
                    PrismaValue::Object(vec![(
                        "divide".to_string(),
                        PrismaValue::Int(value as i64),
                    )]),
                ),
                SetParam::SetLongestKillstreak(value) => (
                    "longestKillstreak".to_string(),
                    PrismaValue::Int(value as i64),
                ),
                SetParam::IncrementLongestKillstreak(value) => (
                    "longestKillstreak".to_string(),
                    PrismaValue::Object(vec![(
                        "increment".to_string(),
                        PrismaValue::Int(value as i64),
                    )]),
                ),
                SetParam::DecrementLongestKillstreak(value) => (
                    "longestKillstreak".to_string(),
                    PrismaValue::Object(vec![(
                        "decrement".to_string(),
                        PrismaValue::Int(value as i64),
                    )]),
                ),
                SetParam::MultiplyLongestKillstreak(value) => (
                    "longestKillstreak".to_string(),
                    PrismaValue::Object(vec![(
                        "multiply".to_string(),
                        PrismaValue::Int(value as i64),
                    )]),
                ),
                SetParam::DivideLongestKillstreak(value) => (
                    "longestKillstreak".to_string(),
                    PrismaValue::Object(vec![(
                        "divide".to_string(),
                        PrismaValue::Int(value as i64),
                    )]),
                ),
            }
        }
    }
    #[derive(Clone)]
    pub enum OrderByParam {
        PlayerId(Direction),
        Kills(Direction),
        Deaths(Direction),
        Assists(Direction),
        Killstreak(Direction),
        LongestKillstreak(Direction),
    }
    impl Into<(String, PrismaValue)> for OrderByParam {
        fn into(self) -> (String, PrismaValue) {
            match self {
                Self::PlayerId(direction) => (
                    "playerId".to_string(),
                    PrismaValue::String(direction.to_string()),
                ),
                Self::Kills(direction) => (
                    "kills".to_string(),
                    PrismaValue::String(direction.to_string()),
                ),
                Self::Deaths(direction) => (
                    "deaths".to_string(),
                    PrismaValue::String(direction.to_string()),
                ),
                Self::Assists(direction) => (
                    "assists".to_string(),
                    PrismaValue::String(direction.to_string()),
                ),
                Self::Killstreak(direction) => (
                    "killstreak".to_string(),
                    PrismaValue::String(direction.to_string()),
                ),
                Self::LongestKillstreak(direction) => (
                    "longestKillstreak".to_string(),
                    PrismaValue::String(direction.to_string()),
                ),
            }
        }
    }
    #[derive(Clone)]
    pub enum Cursor {
        PlayerId(String),
    }
    impl Into<(String, PrismaValue)> for Cursor {
        fn into(self) -> (String, PrismaValue) {
            match self {
                Self::PlayerId(cursor) => ("playerId".to_string(), PrismaValue::String(cursor)),
            }
        }
    }
    #[derive(Clone)]
    pub enum WhereParam {
        Not(Vec<WhereParam>),
        Or(Vec<WhereParam>),
        And(Vec<WhereParam>),
        PlayerIdEquals(String),
        PlayerIdInVec(Vec<String>),
        PlayerIdNotInVec(Vec<String>),
        PlayerIdLt(String),
        PlayerIdLte(String),
        PlayerIdGt(String),
        PlayerIdGte(String),
        PlayerIdContains(String),
        PlayerIdStartsWith(String),
        PlayerIdEndsWith(String),
        PlayerIdMode(QueryMode),
        PlayerIdNot(String),
        KillsEquals(i32),
        KillsInVec(Vec<i32>),
        KillsNotInVec(Vec<i32>),
        KillsLt(i32),
        KillsLte(i32),
        KillsGt(i32),
        KillsGte(i32),
        KillsNot(i32),
        DeathsEquals(i32),
        DeathsInVec(Vec<i32>),
        DeathsNotInVec(Vec<i32>),
        DeathsLt(i32),
        DeathsLte(i32),
        DeathsGt(i32),
        DeathsGte(i32),
        DeathsNot(i32),
        AssistsEquals(i32),
        AssistsInVec(Vec<i32>),
        AssistsNotInVec(Vec<i32>),
        AssistsLt(i32),
        AssistsLte(i32),
        AssistsGt(i32),
        AssistsGte(i32),
        AssistsNot(i32),
        KillstreakEquals(i32),
        KillstreakInVec(Vec<i32>),
        KillstreakNotInVec(Vec<i32>),
        KillstreakLt(i32),
        KillstreakLte(i32),
        KillstreakGt(i32),
        KillstreakGte(i32),
        KillstreakNot(i32),
        LongestKillstreakEquals(i32),
        LongestKillstreakInVec(Vec<i32>),
        LongestKillstreakNotInVec(Vec<i32>),
        LongestKillstreakLt(i32),
        LongestKillstreakLte(i32),
        LongestKillstreakGt(i32),
        LongestKillstreakGte(i32),
        LongestKillstreakNot(i32),
    }
    impl Into<SerializedWhere> for WhereParam {
        fn into(self) -> SerializedWhere {
            match self {
                Self::Not(value) => (
                    "NOT".to_string(),
                    SerializedWhereValue::List(
                        value
                            .into_iter()
                            .map(|v| PrismaValue::Object(transform_equals(vec![v].into_iter())))
                            .collect(),
                    ),
                ),
                Self::Or(value) => (
                    "OR".to_string(),
                    SerializedWhereValue::List(
                        value
                            .into_iter()
                            .map(|v| PrismaValue::Object(transform_equals(vec![v].into_iter())))
                            .collect(),
                    ),
                ),
                Self::And(value) => (
                    "AND".to_string(),
                    SerializedWhereValue::List(
                        value
                            .into_iter()
                            .map(|v| PrismaValue::Object(transform_equals(vec![v].into_iter())))
                            .collect(),
                    ),
                ),
                Self::PlayerIdEquals(value) => (
                    "playerId".to_string(),
                    SerializedWhereValue::Object(vec![(
                        "equals".to_string(),
                        PrismaValue::String(value),
                    )]),
                ),
                Self::PlayerIdInVec(value) => (
                    "playerId".to_string(),
                    SerializedWhereValue::Object(vec![(
                        "in".to_string(),
                        PrismaValue::List(
                            value.into_iter().map(|v| PrismaValue::String(v)).collect(),
                        ),
                    )]),
                ),
                Self::PlayerIdNotInVec(value) => (
                    "playerId".to_string(),
                    SerializedWhereValue::Object(vec![(
                        "notIn".to_string(),
                        PrismaValue::List(
                            value.into_iter().map(|v| PrismaValue::String(v)).collect(),
                        ),
                    )]),
                ),
                Self::PlayerIdLt(value) => (
                    "playerId".to_string(),
                    SerializedWhereValue::Object(vec![(
                        "lt".to_string(),
                        PrismaValue::String(value),
                    )]),
                ),
                Self::PlayerIdLte(value) => (
                    "playerId".to_string(),
                    SerializedWhereValue::Object(vec![(
                        "lte".to_string(),
                        PrismaValue::String(value),
                    )]),
                ),
                Self::PlayerIdGt(value) => (
                    "playerId".to_string(),
                    SerializedWhereValue::Object(vec![(
                        "gt".to_string(),
                        PrismaValue::String(value),
                    )]),
                ),
                Self::PlayerIdGte(value) => (
                    "playerId".to_string(),
                    SerializedWhereValue::Object(vec![(
                        "gte".to_string(),
                        PrismaValue::String(value),
                    )]),
                ),
                Self::PlayerIdContains(value) => (
                    "playerId".to_string(),
                    SerializedWhereValue::Object(vec![(
                        "contains".to_string(),
                        PrismaValue::String(value),
                    )]),
                ),
                Self::PlayerIdStartsWith(value) => (
                    "playerId".to_string(),
                    SerializedWhereValue::Object(vec![(
                        "startsWith".to_string(),
                        PrismaValue::String(value),
                    )]),
                ),
                Self::PlayerIdEndsWith(value) => (
                    "playerId".to_string(),
                    SerializedWhereValue::Object(vec![(
                        "endsWith".to_string(),
                        PrismaValue::String(value),
                    )]),
                ),
                Self::PlayerIdMode(value) => (
                    "playerId".to_string(),
                    SerializedWhereValue::Object(vec![(
                        "mode".to_string(),
                        PrismaValue::Enum(value.to_string()),
                    )]),
                ),
                Self::PlayerIdNot(value) => (
                    "playerId".to_string(),
                    SerializedWhereValue::Object(vec![(
                        "not".to_string(),
                        PrismaValue::String(value),
                    )]),
                ),
                Self::KillsEquals(value) => (
                    "kills".to_string(),
                    SerializedWhereValue::Object(vec![(
                        "equals".to_string(),
                        PrismaValue::Int(value as i64),
                    )]),
                ),
                Self::KillsInVec(value) => (
                    "kills".to_string(),
                    SerializedWhereValue::Object(vec![(
                        "in".to_string(),
                        PrismaValue::List(
                            value
                                .into_iter()
                                .map(|v| PrismaValue::Int(v as i64))
                                .collect(),
                        ),
                    )]),
                ),
                Self::KillsNotInVec(value) => (
                    "kills".to_string(),
                    SerializedWhereValue::Object(vec![(
                        "notIn".to_string(),
                        PrismaValue::List(
                            value
                                .into_iter()
                                .map(|v| PrismaValue::Int(v as i64))
                                .collect(),
                        ),
                    )]),
                ),
                Self::KillsLt(value) => (
                    "kills".to_string(),
                    SerializedWhereValue::Object(vec![(
                        "lt".to_string(),
                        PrismaValue::Int(value as i64),
                    )]),
                ),
                Self::KillsLte(value) => (
                    "kills".to_string(),
                    SerializedWhereValue::Object(vec![(
                        "lte".to_string(),
                        PrismaValue::Int(value as i64),
                    )]),
                ),
                Self::KillsGt(value) => (
                    "kills".to_string(),
                    SerializedWhereValue::Object(vec![(
                        "gt".to_string(),
                        PrismaValue::Int(value as i64),
                    )]),
                ),
                Self::KillsGte(value) => (
                    "kills".to_string(),
                    SerializedWhereValue::Object(vec![(
                        "gte".to_string(),
                        PrismaValue::Int(value as i64),
                    )]),
                ),
                Self::KillsNot(value) => (
                    "kills".to_string(),
                    SerializedWhereValue::Object(vec![(
                        "not".to_string(),
                        PrismaValue::Int(value as i64),
                    )]),
                ),
                Self::DeathsEquals(value) => (
                    "deaths".to_string(),
                    SerializedWhereValue::Object(vec![(
                        "equals".to_string(),
                        PrismaValue::Int(value as i64),
                    )]),
                ),
                Self::DeathsInVec(value) => (
                    "deaths".to_string(),
                    SerializedWhereValue::Object(vec![(
                        "in".to_string(),
                        PrismaValue::List(
                            value
                                .into_iter()
                                .map(|v| PrismaValue::Int(v as i64))
                                .collect(),
                        ),
                    )]),
                ),
                Self::DeathsNotInVec(value) => (
                    "deaths".to_string(),
                    SerializedWhereValue::Object(vec![(
                        "notIn".to_string(),
                        PrismaValue::List(
                            value
                                .into_iter()
                                .map(|v| PrismaValue::Int(v as i64))
                                .collect(),
                        ),
                    )]),
                ),
                Self::DeathsLt(value) => (
                    "deaths".to_string(),
                    SerializedWhereValue::Object(vec![(
                        "lt".to_string(),
                        PrismaValue::Int(value as i64),
                    )]),
                ),
                Self::DeathsLte(value) => (
                    "deaths".to_string(),
                    SerializedWhereValue::Object(vec![(
                        "lte".to_string(),
                        PrismaValue::Int(value as i64),
                    )]),
                ),
                Self::DeathsGt(value) => (
                    "deaths".to_string(),
                    SerializedWhereValue::Object(vec![(
                        "gt".to_string(),
                        PrismaValue::Int(value as i64),
                    )]),
                ),
                Self::DeathsGte(value) => (
                    "deaths".to_string(),
                    SerializedWhereValue::Object(vec![(
                        "gte".to_string(),
                        PrismaValue::Int(value as i64),
                    )]),
                ),
                Self::DeathsNot(value) => (
                    "deaths".to_string(),
                    SerializedWhereValue::Object(vec![(
                        "not".to_string(),
                        PrismaValue::Int(value as i64),
                    )]),
                ),
                Self::AssistsEquals(value) => (
                    "assists".to_string(),
                    SerializedWhereValue::Object(vec![(
                        "equals".to_string(),
                        PrismaValue::Int(value as i64),
                    )]),
                ),
                Self::AssistsInVec(value) => (
                    "assists".to_string(),
                    SerializedWhereValue::Object(vec![(
                        "in".to_string(),
                        PrismaValue::List(
                            value
                                .into_iter()
                                .map(|v| PrismaValue::Int(v as i64))
                                .collect(),
                        ),
                    )]),
                ),
                Self::AssistsNotInVec(value) => (
                    "assists".to_string(),
                    SerializedWhereValue::Object(vec![(
                        "notIn".to_string(),
                        PrismaValue::List(
                            value
                                .into_iter()
                                .map(|v| PrismaValue::Int(v as i64))
                                .collect(),
                        ),
                    )]),
                ),
                Self::AssistsLt(value) => (
                    "assists".to_string(),
                    SerializedWhereValue::Object(vec![(
                        "lt".to_string(),
                        PrismaValue::Int(value as i64),
                    )]),
                ),
                Self::AssistsLte(value) => (
                    "assists".to_string(),
                    SerializedWhereValue::Object(vec![(
                        "lte".to_string(),
                        PrismaValue::Int(value as i64),
                    )]),
                ),
                Self::AssistsGt(value) => (
                    "assists".to_string(),
                    SerializedWhereValue::Object(vec![(
                        "gt".to_string(),
                        PrismaValue::Int(value as i64),
                    )]),
                ),
                Self::AssistsGte(value) => (
                    "assists".to_string(),
                    SerializedWhereValue::Object(vec![(
                        "gte".to_string(),
                        PrismaValue::Int(value as i64),
                    )]),
                ),
                Self::AssistsNot(value) => (
                    "assists".to_string(),
                    SerializedWhereValue::Object(vec![(
                        "not".to_string(),
                        PrismaValue::Int(value as i64),
                    )]),
                ),
                Self::KillstreakEquals(value) => (
                    "killstreak".to_string(),
                    SerializedWhereValue::Object(vec![(
                        "equals".to_string(),
                        PrismaValue::Int(value as i64),
                    )]),
                ),
                Self::KillstreakInVec(value) => (
                    "killstreak".to_string(),
                    SerializedWhereValue::Object(vec![(
                        "in".to_string(),
                        PrismaValue::List(
                            value
                                .into_iter()
                                .map(|v| PrismaValue::Int(v as i64))
                                .collect(),
                        ),
                    )]),
                ),
                Self::KillstreakNotInVec(value) => (
                    "killstreak".to_string(),
                    SerializedWhereValue::Object(vec![(
                        "notIn".to_string(),
                        PrismaValue::List(
                            value
                                .into_iter()
                                .map(|v| PrismaValue::Int(v as i64))
                                .collect(),
                        ),
                    )]),
                ),
                Self::KillstreakLt(value) => (
                    "killstreak".to_string(),
                    SerializedWhereValue::Object(vec![(
                        "lt".to_string(),
                        PrismaValue::Int(value as i64),
                    )]),
                ),
                Self::KillstreakLte(value) => (
                    "killstreak".to_string(),
                    SerializedWhereValue::Object(vec![(
                        "lte".to_string(),
                        PrismaValue::Int(value as i64),
                    )]),
                ),
                Self::KillstreakGt(value) => (
                    "killstreak".to_string(),
                    SerializedWhereValue::Object(vec![(
                        "gt".to_string(),
                        PrismaValue::Int(value as i64),
                    )]),
                ),
                Self::KillstreakGte(value) => (
                    "killstreak".to_string(),
                    SerializedWhereValue::Object(vec![(
                        "gte".to_string(),
                        PrismaValue::Int(value as i64),
                    )]),
                ),
                Self::KillstreakNot(value) => (
                    "killstreak".to_string(),
                    SerializedWhereValue::Object(vec![(
                        "not".to_string(),
                        PrismaValue::Int(value as i64),
                    )]),
                ),
                Self::LongestKillstreakEquals(value) => (
                    "longestKillstreak".to_string(),
                    SerializedWhereValue::Object(vec![(
                        "equals".to_string(),
                        PrismaValue::Int(value as i64),
                    )]),
                ),
                Self::LongestKillstreakInVec(value) => (
                    "longestKillstreak".to_string(),
                    SerializedWhereValue::Object(vec![(
                        "in".to_string(),
                        PrismaValue::List(
                            value
                                .into_iter()
                                .map(|v| PrismaValue::Int(v as i64))
                                .collect(),
                        ),
                    )]),
                ),
                Self::LongestKillstreakNotInVec(value) => (
                    "longestKillstreak".to_string(),
                    SerializedWhereValue::Object(vec![(
                        "notIn".to_string(),
                        PrismaValue::List(
                            value
                                .into_iter()
                                .map(|v| PrismaValue::Int(v as i64))
                                .collect(),
                        ),
                    )]),
                ),
                Self::LongestKillstreakLt(value) => (
                    "longestKillstreak".to_string(),
                    SerializedWhereValue::Object(vec![(
                        "lt".to_string(),
                        PrismaValue::Int(value as i64),
                    )]),
                ),
                Self::LongestKillstreakLte(value) => (
                    "longestKillstreak".to_string(),
                    SerializedWhereValue::Object(vec![(
                        "lte".to_string(),
                        PrismaValue::Int(value as i64),
                    )]),
                ),
                Self::LongestKillstreakGt(value) => (
                    "longestKillstreak".to_string(),
                    SerializedWhereValue::Object(vec![(
                        "gt".to_string(),
                        PrismaValue::Int(value as i64),
                    )]),
                ),
                Self::LongestKillstreakGte(value) => (
                    "longestKillstreak".to_string(),
                    SerializedWhereValue::Object(vec![(
                        "gte".to_string(),
                        PrismaValue::Int(value as i64),
                    )]),
                ),
                Self::LongestKillstreakNot(value) => (
                    "longestKillstreak".to_string(),
                    SerializedWhereValue::Object(vec![(
                        "not".to_string(),
                        PrismaValue::Int(value as i64),
                    )]),
                ),
            }
        }
    }
    #[derive(Clone)]
    pub enum UniqueWhereParam {
        PlayerIdEquals(String),
    }
    impl From<UniqueWhereParam> for WhereParam {
        fn from(value: UniqueWhereParam) -> Self {
            match value {
                UniqueWhereParam::PlayerIdEquals(value) => Self::PlayerIdEquals(value),
            }
        }
    }
    impl From<Operator<Self>> for WhereParam {
        fn from(op: Operator<Self>) -> Self {
            match op {
                Operator::Not(value) => Self::Not(value),
                Operator::And(value) => Self::And(value),
                Operator::Or(value) => Self::Or(value),
            }
        }
    }
    pub type UniqueArgs = prisma_client_rust::UniqueArgs<WithParam>;
    pub type ManyArgs = prisma_client_rust::ManyArgs<WhereParam, WithParam, OrderByParam, Cursor>;
    pub type Create<'a> = prisma_client_rust::Create<'a, SetParam, WithParam, Data>;
    pub type FindUnique<'a> =
        prisma_client_rust::FindUnique<'a, WhereParam, WithParam, SetParam, Data>;
    pub type FindMany<'a> = prisma_client_rust::FindMany<
        'a,
        WhereParam,
        WithParam,
        OrderByParam,
        Cursor,
        SetParam,
        Data,
    >;
    pub type FindFirst<'a> =
        prisma_client_rust::FindFirst<'a, WhereParam, WithParam, OrderByParam, Cursor, Data>;
    pub type Update<'a> = prisma_client_rust::Update<'a, WhereParam, SetParam, WithParam, Data>;
    pub type UpdateMany<'a> = prisma_client_rust::UpdateMany<'a, WhereParam, SetParam>;
    pub type Upsert<'a> = prisma_client_rust::Upsert<'a, WhereParam, SetParam, WithParam, Data>;
    pub type Delete<'a> = prisma_client_rust::Delete<'a, WhereParam, WithParam, Data>;
    pub type DeleteMany<'a> = prisma_client_rust::DeleteMany<'a, WhereParam>;
    pub struct Actions<'a> {
        pub client: &'a PrismaClient,
    }
    impl<'a> Actions<'a> {
        pub fn create(self, player_id: player_id::Set, mut _params: Vec<SetParam>) -> Create<'a> {
            _params.push(player_id.into());
            Create::new(
                self.client._new_query_context(),
                QueryInfo::new("FFAPlayerStats", _outputs()),
                _params,
            )
        }
        pub fn find_unique(self, param: UniqueWhereParam) -> FindUnique<'a> {
            FindUnique::new(
                self.client._new_query_context(),
                QueryInfo::new("FFAPlayerStats", _outputs()),
                param.into(),
            )
        }
        pub fn find_first(self, params: Vec<WhereParam>) -> FindFirst<'a> {
            FindFirst::new(
                self.client._new_query_context(),
                QueryInfo::new("FFAPlayerStats", _outputs()),
                params,
            )
        }
        pub fn find_many(self, params: Vec<WhereParam>) -> FindMany<'a> {
            FindMany::new(
                self.client._new_query_context(),
                QueryInfo::new("FFAPlayerStats", _outputs()),
                params,
            )
        }
        pub fn upsert(
            self,
            _where: UniqueWhereParam,
            _create: (player_id::Set, Vec<SetParam>),
            _update: Vec<SetParam>,
        ) -> Upsert<'a> {
            let (player_id, mut _params) = _create;
            _params.push(player_id.into());
            Upsert::new(
                self.client._new_query_context(),
                QueryInfo::new("FFAPlayerStats", _outputs()),
                _where.into(),
                _params,
                _update,
            )
        }
    }
}
pub mod player {
    use super::_prisma::*;
    use super::*;
    pub mod id {
        use super::super::*;
        use super::_prisma::*;
        use super::{Cursor, OrderByParam, SetParam, UniqueWhereParam, WhereParam, WithParam};
        pub fn set<T: From<Set>>(value: String) -> T {
            Set(value).into()
        }
        pub fn equals<T: From<UniqueWhereParam>>(value: String) -> T {
            UniqueWhereParam::IdEquals(value).into()
        }
        pub fn order(direction: Direction) -> OrderByParam {
            OrderByParam::Id(direction)
        }
        pub fn cursor(cursor: String) -> Cursor {
            Cursor::Id(cursor)
        }
        pub fn in_vec(value: Vec<String>) -> WhereParam {
            WhereParam::IdInVec(value)
        }
        pub fn not_in_vec(value: Vec<String>) -> WhereParam {
            WhereParam::IdNotInVec(value)
        }
        pub fn lt(value: String) -> WhereParam {
            WhereParam::IdLt(value)
        }
        pub fn lte(value: String) -> WhereParam {
            WhereParam::IdLte(value)
        }
        pub fn gt(value: String) -> WhereParam {
            WhereParam::IdGt(value)
        }
        pub fn gte(value: String) -> WhereParam {
            WhereParam::IdGte(value)
        }
        pub fn contains(value: String) -> WhereParam {
            WhereParam::IdContains(value)
        }
        pub fn starts_with(value: String) -> WhereParam {
            WhereParam::IdStartsWith(value)
        }
        pub fn ends_with(value: String) -> WhereParam {
            WhereParam::IdEndsWith(value)
        }
        pub fn mode(value: QueryMode) -> WhereParam {
            WhereParam::IdMode(value)
        }
        pub fn not(value: String) -> WhereParam {
            WhereParam::IdNot(value)
        }
        pub struct Set(String);
        impl From<Set> for SetParam {
            fn from(value: Set) -> Self {
                Self::SetId(value.0)
            }
        }
    }
    pub mod hexes {
        use super::super::*;
        use super::_prisma::*;
        use super::{Cursor, OrderByParam, SetParam, UniqueWhereParam, WhereParam, WithParam};
        pub fn set<T: From<Set>>(value: i32) -> T {
            Set(value).into()
        }
        pub fn equals(value: i32) -> WhereParam {
            WhereParam::HexesEquals(value).into()
        }
        pub fn order(direction: Direction) -> OrderByParam {
            OrderByParam::Hexes(direction)
        }
        pub fn in_vec(value: Vec<i32>) -> WhereParam {
            WhereParam::HexesInVec(value)
        }
        pub fn not_in_vec(value: Vec<i32>) -> WhereParam {
            WhereParam::HexesNotInVec(value)
        }
        pub fn lt(value: i32) -> WhereParam {
            WhereParam::HexesLt(value)
        }
        pub fn lte(value: i32) -> WhereParam {
            WhereParam::HexesLte(value)
        }
        pub fn gt(value: i32) -> WhereParam {
            WhereParam::HexesGt(value)
        }
        pub fn gte(value: i32) -> WhereParam {
            WhereParam::HexesGte(value)
        }
        pub fn not(value: i32) -> WhereParam {
            WhereParam::HexesNot(value)
        }
        pub fn increment(value: i32) -> SetParam {
            SetParam::IncrementHexes(value)
        }
        pub fn decrement(value: i32) -> SetParam {
            SetParam::DecrementHexes(value)
        }
        pub fn multiply(value: i32) -> SetParam {
            SetParam::MultiplyHexes(value)
        }
        pub fn divide(value: i32) -> SetParam {
            SetParam::DivideHexes(value)
        }
        pub struct Set(i32);
        impl From<Set> for SetParam {
            fn from(value: Set) -> Self {
                Self::SetHexes(value.0)
            }
        }
    }
    pub mod last_username {
        use super::super::*;
        use super::_prisma::*;
        use super::{Cursor, OrderByParam, SetParam, UniqueWhereParam, WhereParam, WithParam};
        pub fn set<T: From<Set>>(value: String) -> T {
            Set(value).into()
        }
        pub fn equals(value: String) -> WhereParam {
            WhereParam::LastUsernameEquals(value).into()
        }
        pub fn order(direction: Direction) -> OrderByParam {
            OrderByParam::LastUsername(direction)
        }
        pub fn in_vec(value: Vec<String>) -> WhereParam {
            WhereParam::LastUsernameInVec(value)
        }
        pub fn not_in_vec(value: Vec<String>) -> WhereParam {
            WhereParam::LastUsernameNotInVec(value)
        }
        pub fn lt(value: String) -> WhereParam {
            WhereParam::LastUsernameLt(value)
        }
        pub fn lte(value: String) -> WhereParam {
            WhereParam::LastUsernameLte(value)
        }
        pub fn gt(value: String) -> WhereParam {
            WhereParam::LastUsernameGt(value)
        }
        pub fn gte(value: String) -> WhereParam {
            WhereParam::LastUsernameGte(value)
        }
        pub fn contains(value: String) -> WhereParam {
            WhereParam::LastUsernameContains(value)
        }
        pub fn starts_with(value: String) -> WhereParam {
            WhereParam::LastUsernameStartsWith(value)
        }
        pub fn ends_with(value: String) -> WhereParam {
            WhereParam::LastUsernameEndsWith(value)
        }
        pub fn mode(value: QueryMode) -> WhereParam {
            WhereParam::LastUsernameMode(value)
        }
        pub fn not(value: String) -> WhereParam {
            WhereParam::LastUsernameNot(value)
        }
        pub struct Set(String);
        impl From<Set> for SetParam {
            fn from(value: Set) -> Self {
                Self::SetLastUsername(value.0)
            }
        }
    }
    pub mod last_seen {
        use super::super::*;
        use super::_prisma::*;
        use super::{Cursor, OrderByParam, SetParam, UniqueWhereParam, WhereParam, WithParam};
        pub fn set<T: From<Set>>(value: chrono::DateTime<chrono::FixedOffset>) -> T {
            Set(value).into()
        }
        pub fn equals(value: chrono::DateTime<chrono::FixedOffset>) -> WhereParam {
            WhereParam::LastSeenEquals(value).into()
        }
        pub fn order(direction: Direction) -> OrderByParam {
            OrderByParam::LastSeen(direction)
        }
        pub fn in_vec(value: Vec<chrono::DateTime<chrono::FixedOffset>>) -> WhereParam {
            WhereParam::LastSeenInVec(value)
        }
        pub fn not_in_vec(value: Vec<chrono::DateTime<chrono::FixedOffset>>) -> WhereParam {
            WhereParam::LastSeenNotInVec(value)
        }
        pub fn lt(value: chrono::DateTime<chrono::FixedOffset>) -> WhereParam {
            WhereParam::LastSeenLt(value)
        }
        pub fn lte(value: chrono::DateTime<chrono::FixedOffset>) -> WhereParam {
            WhereParam::LastSeenLte(value)
        }
        pub fn gt(value: chrono::DateTime<chrono::FixedOffset>) -> WhereParam {
            WhereParam::LastSeenGt(value)
        }
        pub fn gte(value: chrono::DateTime<chrono::FixedOffset>) -> WhereParam {
            WhereParam::LastSeenGte(value)
        }
        pub fn not(value: chrono::DateTime<chrono::FixedOffset>) -> WhereParam {
            WhereParam::LastSeenNot(value)
        }
        pub struct Set(chrono::DateTime<chrono::FixedOffset>);
        impl From<Set> for SetParam {
            fn from(value: Set) -> Self {
                Self::SetLastSeen(value.0)
            }
        }
    }
    pub mod created_at {
        use super::super::*;
        use super::_prisma::*;
        use super::{Cursor, OrderByParam, SetParam, UniqueWhereParam, WhereParam, WithParam};
        pub fn set<T: From<Set>>(value: chrono::DateTime<chrono::FixedOffset>) -> T {
            Set(value).into()
        }
        pub fn equals(value: chrono::DateTime<chrono::FixedOffset>) -> WhereParam {
            WhereParam::CreatedAtEquals(value).into()
        }
        pub fn order(direction: Direction) -> OrderByParam {
            OrderByParam::CreatedAt(direction)
        }
        pub fn in_vec(value: Vec<chrono::DateTime<chrono::FixedOffset>>) -> WhereParam {
            WhereParam::CreatedAtInVec(value)
        }
        pub fn not_in_vec(value: Vec<chrono::DateTime<chrono::FixedOffset>>) -> WhereParam {
            WhereParam::CreatedAtNotInVec(value)
        }
        pub fn lt(value: chrono::DateTime<chrono::FixedOffset>) -> WhereParam {
            WhereParam::CreatedAtLt(value)
        }
        pub fn lte(value: chrono::DateTime<chrono::FixedOffset>) -> WhereParam {
            WhereParam::CreatedAtLte(value)
        }
        pub fn gt(value: chrono::DateTime<chrono::FixedOffset>) -> WhereParam {
            WhereParam::CreatedAtGt(value)
        }
        pub fn gte(value: chrono::DateTime<chrono::FixedOffset>) -> WhereParam {
            WhereParam::CreatedAtGte(value)
        }
        pub fn not(value: chrono::DateTime<chrono::FixedOffset>) -> WhereParam {
            WhereParam::CreatedAtNot(value)
        }
        pub struct Set(chrono::DateTime<chrono::FixedOffset>);
        impl From<Set> for SetParam {
            fn from(value: Set) -> Self {
                Self::SetCreatedAt(value.0)
            }
        }
    }
    pub mod updated_at {
        use super::super::*;
        use super::_prisma::*;
        use super::{Cursor, OrderByParam, SetParam, UniqueWhereParam, WhereParam, WithParam};
        pub fn set<T: From<Set>>(value: chrono::DateTime<chrono::FixedOffset>) -> T {
            Set(value).into()
        }
        pub fn equals(value: chrono::DateTime<chrono::FixedOffset>) -> WhereParam {
            WhereParam::UpdatedAtEquals(value).into()
        }
        pub fn order(direction: Direction) -> OrderByParam {
            OrderByParam::UpdatedAt(direction)
        }
        pub fn in_vec(value: Vec<chrono::DateTime<chrono::FixedOffset>>) -> WhereParam {
            WhereParam::UpdatedAtInVec(value)
        }
        pub fn not_in_vec(value: Vec<chrono::DateTime<chrono::FixedOffset>>) -> WhereParam {
            WhereParam::UpdatedAtNotInVec(value)
        }
        pub fn lt(value: chrono::DateTime<chrono::FixedOffset>) -> WhereParam {
            WhereParam::UpdatedAtLt(value)
        }
        pub fn lte(value: chrono::DateTime<chrono::FixedOffset>) -> WhereParam {
            WhereParam::UpdatedAtLte(value)
        }
        pub fn gt(value: chrono::DateTime<chrono::FixedOffset>) -> WhereParam {
            WhereParam::UpdatedAtGt(value)
        }
        pub fn gte(value: chrono::DateTime<chrono::FixedOffset>) -> WhereParam {
            WhereParam::UpdatedAtGte(value)
        }
        pub fn not(value: chrono::DateTime<chrono::FixedOffset>) -> WhereParam {
            WhereParam::UpdatedAtNot(value)
        }
        pub struct Set(chrono::DateTime<chrono::FixedOffset>);
        impl From<Set> for SetParam {
            fn from(value: Set) -> Self {
                Self::SetUpdatedAt(value.0)
            }
        }
    }
    pub fn _outputs() -> Vec<Selection> {
        [
            "id",
            "hexes",
            "lastUsername",
            "lastSeen",
            "createdAt",
            "updatedAt",
        ]
        .into_iter()
        .map(|o| {
            let builder = Selection::builder(o);
            builder.build()
        })
        .collect()
    }
    #[derive(Debug, Clone, Serialize, Deserialize)]
    pub struct Data {
        #[serde(rename = "id")]
        pub id: String,
        #[serde(rename = "hexes")]
        pub hexes: i32,
        #[serde(rename = "lastUsername")]
        pub last_username: String,
        #[serde(rename = "lastSeen")]
        pub last_seen: chrono::DateTime<chrono::FixedOffset>,
        #[serde(rename = "createdAt")]
        pub created_at: chrono::DateTime<chrono::FixedOffset>,
        #[serde(rename = "updatedAt")]
        pub updated_at: chrono::DateTime<chrono::FixedOffset>,
    }
    impl Data {}
    #[derive(Clone)]
    pub enum WithParam {}
    impl Into<Selection> for WithParam {
        fn into(self) -> Selection {
            match self {}
        }
    }
    #[derive(Clone)]
    pub enum SetParam {
        SetId(String),
        SetHexes(i32),
        IncrementHexes(i32),
        DecrementHexes(i32),
        MultiplyHexes(i32),
        DivideHexes(i32),
        SetLastUsername(String),
        SetLastSeen(chrono::DateTime<chrono::FixedOffset>),
        SetCreatedAt(chrono::DateTime<chrono::FixedOffset>),
        SetUpdatedAt(chrono::DateTime<chrono::FixedOffset>),
    }
    impl Into<(String, PrismaValue)> for SetParam {
        fn into(self) -> (String, PrismaValue) {
            match self {
                SetParam::SetId(value) => ("id".to_string(), PrismaValue::String(value)),
                SetParam::SetHexes(value) => ("hexes".to_string(), PrismaValue::Int(value as i64)),
                SetParam::IncrementHexes(value) => (
                    "hexes".to_string(),
                    PrismaValue::Object(vec![(
                        "increment".to_string(),
                        PrismaValue::Int(value as i64),
                    )]),
                ),
                SetParam::DecrementHexes(value) => (
                    "hexes".to_string(),
                    PrismaValue::Object(vec![(
                        "decrement".to_string(),
                        PrismaValue::Int(value as i64),
                    )]),
                ),
                SetParam::MultiplyHexes(value) => (
                    "hexes".to_string(),
                    PrismaValue::Object(vec![(
                        "multiply".to_string(),
                        PrismaValue::Int(value as i64),
                    )]),
                ),
                SetParam::DivideHexes(value) => (
                    "hexes".to_string(),
                    PrismaValue::Object(vec![(
                        "divide".to_string(),
                        PrismaValue::Int(value as i64),
                    )]),
                ),
                SetParam::SetLastUsername(value) => {
                    ("lastUsername".to_string(), PrismaValue::String(value))
                }
                SetParam::SetLastSeen(value) => {
                    ("lastSeen".to_string(), PrismaValue::DateTime(value))
                }
                SetParam::SetCreatedAt(value) => {
                    ("createdAt".to_string(), PrismaValue::DateTime(value))
                }
                SetParam::SetUpdatedAt(value) => {
                    ("updatedAt".to_string(), PrismaValue::DateTime(value))
                }
            }
        }
    }
    #[derive(Clone)]
    pub enum OrderByParam {
        Id(Direction),
        Hexes(Direction),
        LastUsername(Direction),
        LastSeen(Direction),
        CreatedAt(Direction),
        UpdatedAt(Direction),
    }
    impl Into<(String, PrismaValue)> for OrderByParam {
        fn into(self) -> (String, PrismaValue) {
            match self {
                Self::Id(direction) => {
                    ("id".to_string(), PrismaValue::String(direction.to_string()))
                }
                Self::Hexes(direction) => (
                    "hexes".to_string(),
                    PrismaValue::String(direction.to_string()),
                ),
                Self::LastUsername(direction) => (
                    "lastUsername".to_string(),
                    PrismaValue::String(direction.to_string()),
                ),
                Self::LastSeen(direction) => (
                    "lastSeen".to_string(),
                    PrismaValue::String(direction.to_string()),
                ),
                Self::CreatedAt(direction) => (
                    "createdAt".to_string(),
                    PrismaValue::String(direction.to_string()),
                ),
                Self::UpdatedAt(direction) => (
                    "updatedAt".to_string(),
                    PrismaValue::String(direction.to_string()),
                ),
            }
        }
    }
    #[derive(Clone)]
    pub enum Cursor {
        Id(String),
    }
    impl Into<(String, PrismaValue)> for Cursor {
        fn into(self) -> (String, PrismaValue) {
            match self {
                Self::Id(cursor) => ("id".to_string(), PrismaValue::String(cursor)),
            }
        }
    }
    #[derive(Clone)]
    pub enum WhereParam {
        Not(Vec<WhereParam>),
        Or(Vec<WhereParam>),
        And(Vec<WhereParam>),
        IdEquals(String),
        IdInVec(Vec<String>),
        IdNotInVec(Vec<String>),
        IdLt(String),
        IdLte(String),
        IdGt(String),
        IdGte(String),
        IdContains(String),
        IdStartsWith(String),
        IdEndsWith(String),
        IdMode(QueryMode),
        IdNot(String),
        HexesEquals(i32),
        HexesInVec(Vec<i32>),
        HexesNotInVec(Vec<i32>),
        HexesLt(i32),
        HexesLte(i32),
        HexesGt(i32),
        HexesGte(i32),
        HexesNot(i32),
        LastUsernameEquals(String),
        LastUsernameInVec(Vec<String>),
        LastUsernameNotInVec(Vec<String>),
        LastUsernameLt(String),
        LastUsernameLte(String),
        LastUsernameGt(String),
        LastUsernameGte(String),
        LastUsernameContains(String),
        LastUsernameStartsWith(String),
        LastUsernameEndsWith(String),
        LastUsernameMode(QueryMode),
        LastUsernameNot(String),
        LastSeenEquals(chrono::DateTime<chrono::FixedOffset>),
        LastSeenInVec(Vec<chrono::DateTime<chrono::FixedOffset>>),
        LastSeenNotInVec(Vec<chrono::DateTime<chrono::FixedOffset>>),
        LastSeenLt(chrono::DateTime<chrono::FixedOffset>),
        LastSeenLte(chrono::DateTime<chrono::FixedOffset>),
        LastSeenGt(chrono::DateTime<chrono::FixedOffset>),
        LastSeenGte(chrono::DateTime<chrono::FixedOffset>),
        LastSeenNot(chrono::DateTime<chrono::FixedOffset>),
        CreatedAtEquals(chrono::DateTime<chrono::FixedOffset>),
        CreatedAtInVec(Vec<chrono::DateTime<chrono::FixedOffset>>),
        CreatedAtNotInVec(Vec<chrono::DateTime<chrono::FixedOffset>>),
        CreatedAtLt(chrono::DateTime<chrono::FixedOffset>),
        CreatedAtLte(chrono::DateTime<chrono::FixedOffset>),
        CreatedAtGt(chrono::DateTime<chrono::FixedOffset>),
        CreatedAtGte(chrono::DateTime<chrono::FixedOffset>),
        CreatedAtNot(chrono::DateTime<chrono::FixedOffset>),
        UpdatedAtEquals(chrono::DateTime<chrono::FixedOffset>),
        UpdatedAtInVec(Vec<chrono::DateTime<chrono::FixedOffset>>),
        UpdatedAtNotInVec(Vec<chrono::DateTime<chrono::FixedOffset>>),
        UpdatedAtLt(chrono::DateTime<chrono::FixedOffset>),
        UpdatedAtLte(chrono::DateTime<chrono::FixedOffset>),
        UpdatedAtGt(chrono::DateTime<chrono::FixedOffset>),
        UpdatedAtGte(chrono::DateTime<chrono::FixedOffset>),
        UpdatedAtNot(chrono::DateTime<chrono::FixedOffset>),
    }
    impl Into<SerializedWhere> for WhereParam {
        fn into(self) -> SerializedWhere {
            match self {
                Self::Not(value) => (
                    "NOT".to_string(),
                    SerializedWhereValue::List(
                        value
                            .into_iter()
                            .map(|v| PrismaValue::Object(transform_equals(vec![v].into_iter())))
                            .collect(),
                    ),
                ),
                Self::Or(value) => (
                    "OR".to_string(),
                    SerializedWhereValue::List(
                        value
                            .into_iter()
                            .map(|v| PrismaValue::Object(transform_equals(vec![v].into_iter())))
                            .collect(),
                    ),
                ),
                Self::And(value) => (
                    "AND".to_string(),
                    SerializedWhereValue::List(
                        value
                            .into_iter()
                            .map(|v| PrismaValue::Object(transform_equals(vec![v].into_iter())))
                            .collect(),
                    ),
                ),
                Self::IdEquals(value) => (
                    "id".to_string(),
                    SerializedWhereValue::Object(vec![(
                        "equals".to_string(),
                        PrismaValue::String(value),
                    )]),
                ),
                Self::IdInVec(value) => (
                    "id".to_string(),
                    SerializedWhereValue::Object(vec![(
                        "in".to_string(),
                        PrismaValue::List(
                            value.into_iter().map(|v| PrismaValue::String(v)).collect(),
                        ),
                    )]),
                ),
                Self::IdNotInVec(value) => (
                    "id".to_string(),
                    SerializedWhereValue::Object(vec![(
                        "notIn".to_string(),
                        PrismaValue::List(
                            value.into_iter().map(|v| PrismaValue::String(v)).collect(),
                        ),
                    )]),
                ),
                Self::IdLt(value) => (
                    "id".to_string(),
                    SerializedWhereValue::Object(vec![(
                        "lt".to_string(),
                        PrismaValue::String(value),
                    )]),
                ),
                Self::IdLte(value) => (
                    "id".to_string(),
                    SerializedWhereValue::Object(vec![(
                        "lte".to_string(),
                        PrismaValue::String(value),
                    )]),
                ),
                Self::IdGt(value) => (
                    "id".to_string(),
                    SerializedWhereValue::Object(vec![(
                        "gt".to_string(),
                        PrismaValue::String(value),
                    )]),
                ),
                Self::IdGte(value) => (
                    "id".to_string(),
                    SerializedWhereValue::Object(vec![(
                        "gte".to_string(),
                        PrismaValue::String(value),
                    )]),
                ),
                Self::IdContains(value) => (
                    "id".to_string(),
                    SerializedWhereValue::Object(vec![(
                        "contains".to_string(),
                        PrismaValue::String(value),
                    )]),
                ),
                Self::IdStartsWith(value) => (
                    "id".to_string(),
                    SerializedWhereValue::Object(vec![(
                        "startsWith".to_string(),
                        PrismaValue::String(value),
                    )]),
                ),
                Self::IdEndsWith(value) => (
                    "id".to_string(),
                    SerializedWhereValue::Object(vec![(
                        "endsWith".to_string(),
                        PrismaValue::String(value),
                    )]),
                ),
                Self::IdMode(value) => (
                    "id".to_string(),
                    SerializedWhereValue::Object(vec![(
                        "mode".to_string(),
                        PrismaValue::Enum(value.to_string()),
                    )]),
                ),
                Self::IdNot(value) => (
                    "id".to_string(),
                    SerializedWhereValue::Object(vec![(
                        "not".to_string(),
                        PrismaValue::String(value),
                    )]),
                ),
                Self::HexesEquals(value) => (
                    "hexes".to_string(),
                    SerializedWhereValue::Object(vec![(
                        "equals".to_string(),
                        PrismaValue::Int(value as i64),
                    )]),
                ),
                Self::HexesInVec(value) => (
                    "hexes".to_string(),
                    SerializedWhereValue::Object(vec![(
                        "in".to_string(),
                        PrismaValue::List(
                            value
                                .into_iter()
                                .map(|v| PrismaValue::Int(v as i64))
                                .collect(),
                        ),
                    )]),
                ),
                Self::HexesNotInVec(value) => (
                    "hexes".to_string(),
                    SerializedWhereValue::Object(vec![(
                        "notIn".to_string(),
                        PrismaValue::List(
                            value
                                .into_iter()
                                .map(|v| PrismaValue::Int(v as i64))
                                .collect(),
                        ),
                    )]),
                ),
                Self::HexesLt(value) => (
                    "hexes".to_string(),
                    SerializedWhereValue::Object(vec![(
                        "lt".to_string(),
                        PrismaValue::Int(value as i64),
                    )]),
                ),
                Self::HexesLte(value) => (
                    "hexes".to_string(),
                    SerializedWhereValue::Object(vec![(
                        "lte".to_string(),
                        PrismaValue::Int(value as i64),
                    )]),
                ),
                Self::HexesGt(value) => (
                    "hexes".to_string(),
                    SerializedWhereValue::Object(vec![(
                        "gt".to_string(),
                        PrismaValue::Int(value as i64),
                    )]),
                ),
                Self::HexesGte(value) => (
                    "hexes".to_string(),
                    SerializedWhereValue::Object(vec![(
                        "gte".to_string(),
                        PrismaValue::Int(value as i64),
                    )]),
                ),
                Self::HexesNot(value) => (
                    "hexes".to_string(),
                    SerializedWhereValue::Object(vec![(
                        "not".to_string(),
                        PrismaValue::Int(value as i64),
                    )]),
                ),
                Self::LastUsernameEquals(value) => (
                    "lastUsername".to_string(),
                    SerializedWhereValue::Object(vec![(
                        "equals".to_string(),
                        PrismaValue::String(value),
                    )]),
                ),
                Self::LastUsernameInVec(value) => (
                    "lastUsername".to_string(),
                    SerializedWhereValue::Object(vec![(
                        "in".to_string(),
                        PrismaValue::List(
                            value.into_iter().map(|v| PrismaValue::String(v)).collect(),
                        ),
                    )]),
                ),
                Self::LastUsernameNotInVec(value) => (
                    "lastUsername".to_string(),
                    SerializedWhereValue::Object(vec![(
                        "notIn".to_string(),
                        PrismaValue::List(
                            value.into_iter().map(|v| PrismaValue::String(v)).collect(),
                        ),
                    )]),
                ),
                Self::LastUsernameLt(value) => (
                    "lastUsername".to_string(),
                    SerializedWhereValue::Object(vec![(
                        "lt".to_string(),
                        PrismaValue::String(value),
                    )]),
                ),
                Self::LastUsernameLte(value) => (
                    "lastUsername".to_string(),
                    SerializedWhereValue::Object(vec![(
                        "lte".to_string(),
                        PrismaValue::String(value),
                    )]),
                ),
                Self::LastUsernameGt(value) => (
                    "lastUsername".to_string(),
                    SerializedWhereValue::Object(vec![(
                        "gt".to_string(),
                        PrismaValue::String(value),
                    )]),
                ),
                Self::LastUsernameGte(value) => (
                    "lastUsername".to_string(),
                    SerializedWhereValue::Object(vec![(
                        "gte".to_string(),
                        PrismaValue::String(value),
                    )]),
                ),
                Self::LastUsernameContains(value) => (
                    "lastUsername".to_string(),
                    SerializedWhereValue::Object(vec![(
                        "contains".to_string(),
                        PrismaValue::String(value),
                    )]),
                ),
                Self::LastUsernameStartsWith(value) => (
                    "lastUsername".to_string(),
                    SerializedWhereValue::Object(vec![(
                        "startsWith".to_string(),
                        PrismaValue::String(value),
                    )]),
                ),
                Self::LastUsernameEndsWith(value) => (
                    "lastUsername".to_string(),
                    SerializedWhereValue::Object(vec![(
                        "endsWith".to_string(),
                        PrismaValue::String(value),
                    )]),
                ),
                Self::LastUsernameMode(value) => (
                    "lastUsername".to_string(),
                    SerializedWhereValue::Object(vec![(
                        "mode".to_string(),
                        PrismaValue::Enum(value.to_string()),
                    )]),
                ),
                Self::LastUsernameNot(value) => (
                    "lastUsername".to_string(),
                    SerializedWhereValue::Object(vec![(
                        "not".to_string(),
                        PrismaValue::String(value),
                    )]),
                ),
                Self::LastSeenEquals(value) => (
                    "lastSeen".to_string(),
                    SerializedWhereValue::Object(vec![(
                        "equals".to_string(),
                        PrismaValue::DateTime(value),
                    )]),
                ),
                Self::LastSeenInVec(value) => (
                    "lastSeen".to_string(),
                    SerializedWhereValue::Object(vec![(
                        "in".to_string(),
                        PrismaValue::List(
                            value
                                .into_iter()
                                .map(|v| PrismaValue::DateTime(v))
                                .collect(),
                        ),
                    )]),
                ),
                Self::LastSeenNotInVec(value) => (
                    "lastSeen".to_string(),
                    SerializedWhereValue::Object(vec![(
                        "notIn".to_string(),
                        PrismaValue::List(
                            value
                                .into_iter()
                                .map(|v| PrismaValue::DateTime(v))
                                .collect(),
                        ),
                    )]),
                ),
                Self::LastSeenLt(value) => (
                    "lastSeen".to_string(),
                    SerializedWhereValue::Object(vec![(
                        "lt".to_string(),
                        PrismaValue::DateTime(value),
                    )]),
                ),
                Self::LastSeenLte(value) => (
                    "lastSeen".to_string(),
                    SerializedWhereValue::Object(vec![(
                        "lte".to_string(),
                        PrismaValue::DateTime(value),
                    )]),
                ),
                Self::LastSeenGt(value) => (
                    "lastSeen".to_string(),
                    SerializedWhereValue::Object(vec![(
                        "gt".to_string(),
                        PrismaValue::DateTime(value),
                    )]),
                ),
                Self::LastSeenGte(value) => (
                    "lastSeen".to_string(),
                    SerializedWhereValue::Object(vec![(
                        "gte".to_string(),
                        PrismaValue::DateTime(value),
                    )]),
                ),
                Self::LastSeenNot(value) => (
                    "lastSeen".to_string(),
                    SerializedWhereValue::Object(vec![(
                        "not".to_string(),
                        PrismaValue::DateTime(value),
                    )]),
                ),
                Self::CreatedAtEquals(value) => (
                    "createdAt".to_string(),
                    SerializedWhereValue::Object(vec![(
                        "equals".to_string(),
                        PrismaValue::DateTime(value),
                    )]),
                ),
                Self::CreatedAtInVec(value) => (
                    "createdAt".to_string(),
                    SerializedWhereValue::Object(vec![(
                        "in".to_string(),
                        PrismaValue::List(
                            value
                                .into_iter()
                                .map(|v| PrismaValue::DateTime(v))
                                .collect(),
                        ),
                    )]),
                ),
                Self::CreatedAtNotInVec(value) => (
                    "createdAt".to_string(),
                    SerializedWhereValue::Object(vec![(
                        "notIn".to_string(),
                        PrismaValue::List(
                            value
                                .into_iter()
                                .map(|v| PrismaValue::DateTime(v))
                                .collect(),
                        ),
                    )]),
                ),
                Self::CreatedAtLt(value) => (
                    "createdAt".to_string(),
                    SerializedWhereValue::Object(vec![(
                        "lt".to_string(),
                        PrismaValue::DateTime(value),
                    )]),
                ),
                Self::CreatedAtLte(value) => (
                    "createdAt".to_string(),
                    SerializedWhereValue::Object(vec![(
                        "lte".to_string(),
                        PrismaValue::DateTime(value),
                    )]),
                ),
                Self::CreatedAtGt(value) => (
                    "createdAt".to_string(),
                    SerializedWhereValue::Object(vec![(
                        "gt".to_string(),
                        PrismaValue::DateTime(value),
                    )]),
                ),
                Self::CreatedAtGte(value) => (
                    "createdAt".to_string(),
                    SerializedWhereValue::Object(vec![(
                        "gte".to_string(),
                        PrismaValue::DateTime(value),
                    )]),
                ),
                Self::CreatedAtNot(value) => (
                    "createdAt".to_string(),
                    SerializedWhereValue::Object(vec![(
                        "not".to_string(),
                        PrismaValue::DateTime(value),
                    )]),
                ),
                Self::UpdatedAtEquals(value) => (
                    "updatedAt".to_string(),
                    SerializedWhereValue::Object(vec![(
                        "equals".to_string(),
                        PrismaValue::DateTime(value),
                    )]),
                ),
                Self::UpdatedAtInVec(value) => (
                    "updatedAt".to_string(),
                    SerializedWhereValue::Object(vec![(
                        "in".to_string(),
                        PrismaValue::List(
                            value
                                .into_iter()
                                .map(|v| PrismaValue::DateTime(v))
                                .collect(),
                        ),
                    )]),
                ),
                Self::UpdatedAtNotInVec(value) => (
                    "updatedAt".to_string(),
                    SerializedWhereValue::Object(vec![(
                        "notIn".to_string(),
                        PrismaValue::List(
                            value
                                .into_iter()
                                .map(|v| PrismaValue::DateTime(v))
                                .collect(),
                        ),
                    )]),
                ),
                Self::UpdatedAtLt(value) => (
                    "updatedAt".to_string(),
                    SerializedWhereValue::Object(vec![(
                        "lt".to_string(),
                        PrismaValue::DateTime(value),
                    )]),
                ),
                Self::UpdatedAtLte(value) => (
                    "updatedAt".to_string(),
                    SerializedWhereValue::Object(vec![(
                        "lte".to_string(),
                        PrismaValue::DateTime(value),
                    )]),
                ),
                Self::UpdatedAtGt(value) => (
                    "updatedAt".to_string(),
                    SerializedWhereValue::Object(vec![(
                        "gt".to_string(),
                        PrismaValue::DateTime(value),
                    )]),
                ),
                Self::UpdatedAtGte(value) => (
                    "updatedAt".to_string(),
                    SerializedWhereValue::Object(vec![(
                        "gte".to_string(),
                        PrismaValue::DateTime(value),
                    )]),
                ),
                Self::UpdatedAtNot(value) => (
                    "updatedAt".to_string(),
                    SerializedWhereValue::Object(vec![(
                        "not".to_string(),
                        PrismaValue::DateTime(value),
                    )]),
                ),
            }
        }
    }
    #[derive(Clone)]
    pub enum UniqueWhereParam {
        IdEquals(String),
    }
    impl From<UniqueWhereParam> for WhereParam {
        fn from(value: UniqueWhereParam) -> Self {
            match value {
                UniqueWhereParam::IdEquals(value) => Self::IdEquals(value),
            }
        }
    }
    impl From<Operator<Self>> for WhereParam {
        fn from(op: Operator<Self>) -> Self {
            match op {
                Operator::Not(value) => Self::Not(value),
                Operator::And(value) => Self::And(value),
                Operator::Or(value) => Self::Or(value),
            }
        }
    }
    pub type UniqueArgs = prisma_client_rust::UniqueArgs<WithParam>;
    pub type ManyArgs = prisma_client_rust::ManyArgs<WhereParam, WithParam, OrderByParam, Cursor>;
    pub type Create<'a> = prisma_client_rust::Create<'a, SetParam, WithParam, Data>;
    pub type FindUnique<'a> =
        prisma_client_rust::FindUnique<'a, WhereParam, WithParam, SetParam, Data>;
    pub type FindMany<'a> = prisma_client_rust::FindMany<
        'a,
        WhereParam,
        WithParam,
        OrderByParam,
        Cursor,
        SetParam,
        Data,
    >;
    pub type FindFirst<'a> =
        prisma_client_rust::FindFirst<'a, WhereParam, WithParam, OrderByParam, Cursor, Data>;
    pub type Update<'a> = prisma_client_rust::Update<'a, WhereParam, SetParam, WithParam, Data>;
    pub type UpdateMany<'a> = prisma_client_rust::UpdateMany<'a, WhereParam, SetParam>;
    pub type Upsert<'a> = prisma_client_rust::Upsert<'a, WhereParam, SetParam, WithParam, Data>;
    pub type Delete<'a> = prisma_client_rust::Delete<'a, WhereParam, WithParam, Data>;
    pub type DeleteMany<'a> = prisma_client_rust::DeleteMany<'a, WhereParam>;
    pub struct Actions<'a> {
        pub client: &'a PrismaClient,
    }
    impl<'a> Actions<'a> {
        pub fn create(
            self,
            id: id::Set,
            last_username: last_username::Set,
            last_seen: last_seen::Set,
            mut _params: Vec<SetParam>,
        ) -> Create<'a> {
            _params.push(id.into());
            _params.push(last_username.into());
            _params.push(last_seen.into());
            Create::new(
                self.client._new_query_context(),
                QueryInfo::new("Player", _outputs()),
                _params,
            )
        }
        pub fn find_unique(self, param: UniqueWhereParam) -> FindUnique<'a> {
            FindUnique::new(
                self.client._new_query_context(),
                QueryInfo::new("Player", _outputs()),
                param.into(),
            )
        }
        pub fn find_first(self, params: Vec<WhereParam>) -> FindFirst<'a> {
            FindFirst::new(
                self.client._new_query_context(),
                QueryInfo::new("Player", _outputs()),
                params,
            )
        }
        pub fn find_many(self, params: Vec<WhereParam>) -> FindMany<'a> {
            FindMany::new(
                self.client._new_query_context(),
                QueryInfo::new("Player", _outputs()),
                params,
            )
        }
        pub fn upsert(
            self,
            _where: UniqueWhereParam,
            _create: (id::Set, last_username::Set, last_seen::Set, Vec<SetParam>),
            _update: Vec<SetParam>,
        ) -> Upsert<'a> {
            let (id, last_username, last_seen, mut _params) = _create;
            _params.push(id.into());
            _params.push(last_username.into());
            _params.push(last_seen.into());
            Upsert::new(
                self.client._new_query_context(),
                QueryInfo::new("Player", _outputs()),
                _where.into(),
                _params,
                _update,
            )
        }
    }
}
pub mod _prisma {
    use super::*;
    use prisma_client_rust::{
        queries::QueryContext,
        query_core::{QueryExecutor, QuerySchema},
        raw, ExecuteRaw, QueryRaw,
    };
    use serde::{Deserialize, Serialize};
    use std::fmt;
    use std::sync::Arc;
    pub struct PrismaClient {
        executor: Box<dyn QueryExecutor + Send + Sync + 'static>,
        query_schema: Arc<QuerySchema>,
    }
    impl fmt::Debug for PrismaClient {
        fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
            f.debug_struct("PrismaClient").finish()
        }
    }
    impl PrismaClient {
        pub(super) fn _new_query_context(&self) -> QueryContext {
            QueryContext::new(&self.executor, self.query_schema.clone())
        }
        pub(super) fn _new(
            executor: Box<dyn QueryExecutor + Send + Sync + 'static>,
            query_schema: Arc<QuerySchema>,
        ) -> Self {
            Self {
                executor,
                query_schema,
            }
        }
        pub async fn _query_raw<T: serde::de::DeserializeOwned>(
            &self,
            query: raw::Raw,
        ) -> QueryResult<Vec<T>> {
            QueryRaw::new(
                QueryContext::new(&self.executor, self.query_schema.clone()),
                query,
                DATABASE_STR,
            )
            .exec()
            .await
        }
        pub async fn _execute_raw(&self, query: raw::Raw) -> QueryResult<i64> {
            ExecuteRaw::new(
                QueryContext::new(&self.executor, self.query_schema.clone()),
                query,
                DATABASE_STR,
            )
            .exec()
            .await
        }
        pub fn ffa_player_stats(&self) -> ffa_player_stats::Actions {
            ffa_player_stats::Actions { client: &self }
        }
        pub fn player(&self) -> player::Actions {
            player::Actions { client: &self }
        }
    }
    #[derive(Debug, Clone, Copy, Serialize, Deserialize)]
    pub enum FfaPlayerStatsScalarFieldEnum {
        #[serde(rename = "playerId")]
        PlayerId,
        #[serde(rename = "kills")]
        Kills,
        #[serde(rename = "deaths")]
        Deaths,
        #[serde(rename = "assists")]
        Assists,
        #[serde(rename = "killstreak")]
        Killstreak,
        #[serde(rename = "longestKillstreak")]
        LongestKillstreak,
    }
    impl ToString for FfaPlayerStatsScalarFieldEnum {
        fn to_string(&self) -> String {
            match self {
                Self::PlayerId => "playerId".to_string(),
                Self::Kills => "kills".to_string(),
                Self::Deaths => "deaths".to_string(),
                Self::Assists => "assists".to_string(),
                Self::Killstreak => "killstreak".to_string(),
                Self::LongestKillstreak => "longestKillstreak".to_string(),
            }
        }
    }
    #[derive(Debug, Clone, Copy, Serialize, Deserialize)]
    pub enum PlayerScalarFieldEnum {
        #[serde(rename = "id")]
        Id,
        #[serde(rename = "hexes")]
        Hexes,
        #[serde(rename = "lastUsername")]
        LastUsername,
        #[serde(rename = "lastSeen")]
        LastSeen,
        #[serde(rename = "createdAt")]
        CreatedAt,
        #[serde(rename = "updatedAt")]
        UpdatedAt,
    }
    impl ToString for PlayerScalarFieldEnum {
        fn to_string(&self) -> String {
            match self {
                Self::Id => "id".to_string(),
                Self::Hexes => "hexes".to_string(),
                Self::LastUsername => "lastUsername".to_string(),
                Self::LastSeen => "lastSeen".to_string(),
                Self::CreatedAt => "createdAt".to_string(),
                Self::UpdatedAt => "updatedAt".to_string(),
            }
        }
    }
    #[derive(Debug, Clone, Copy, Serialize, Deserialize)]
    pub enum SortOrder {
        #[serde(rename = "asc")]
        Asc,
        #[serde(rename = "desc")]
        Desc,
    }
    impl ToString for SortOrder {
        fn to_string(&self) -> String {
            match self {
                Self::Asc => "asc".to_string(),
                Self::Desc => "desc".to_string(),
            }
        }
    }
    #[derive(Debug, Clone, Copy, Serialize, Deserialize)]
    pub enum QueryMode {
        #[serde(rename = "default")]
        Default,
        #[serde(rename = "insensitive")]
        Insensitive,
    }
    impl ToString for QueryMode {
        fn to_string(&self) -> String {
            match self {
                Self::Default => "default".to_string(),
                Self::Insensitive => "insensitive".to_string(),
            }
        }
    }
}
pub use _prisma::PrismaClient;
